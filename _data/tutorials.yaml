transforming:
  title: "Transform a stream of events"
  slug: "/transform-a-stream-of-events"
  problem: "you have events in a Kafka topic, and you want to change each event in some way and put it in a new topic."
  introduction: "Consider a topic with events that represent movies. Each event has a single attribute that combines its title and its release year into a string. In this tutorial, we'll write a program that creates a new topic with the title and release date turned into their own attributes."
  status:
    ksql: enabled
    kstreams: enabled
    kafka: enabled

filtering:
  title: "Filter a stream of events"
  slug: "/filter-a-stream-of-events"
  problem: "you have events in a Kafka topic, and you want to filter some of them out so that only those you're interested in appear in another topic."
  introduction: "Consider a topic with events that represent book publications. In this tutorial, we'll write a program that creates a new topic which only contains the events for a particular author."
  status:
    ksql: enabled
    kstreams: enabled
    kafka: enabled

splitting:
  title: "Split a stream of events into substreams"
  slug: "/split-a-stream-of-events-into-substreams"
  problem: "you have events in a single Kafka topic, and you want to split it so that the events are placed into subtopics."
  introduction: "Suppose that you have a Kafka topic representing appearances of an actor or actress in a film, with each event denoting the genre. In this tutorial, we'll write a program that splits the stream into substreams based on the genre. We'll have a topic for drama films, a topic for fantasy films, and a topic for everything else."
  status:
    ksql: enabled
    kstreams: enabled
    kafka: enabled

merging:
  title: "Merge many streams into one stream"
  slug: "/merge-many-streams-into-one-stream"
  problem: "you have many Kafka topics with events in them, and you want to merge them all into a single topic."
  introduction: "Suppose that you have a set of Kafka topics representing songs being played of a particular genre. You might have a topic for rock songs, another for classical songs, and so forth. In this tutorial, we'll write a program that merges all of the song play events into a single topic."
  status:
    ksql: enabled
    kstreams: enabled
    kafka: enabled

joining-stream-table:
  title: "Join a stream and a table together"
  slug: "/join-a-stream-to-a-table"
  problem: "you have events in a Kafka topic and a table of reference data. You want to join each event in the stream to a piece of data in the table based on a common key."
  introduction: "Suppose you have a set of movies that have been released and a stream of ratings from movie-goers about how entertaining they are. In this tutorial, we'll write a program that joins each rating with content about the movie."
  status:
    ksql: enabled
    kstreams: enabled

joining-table-table:
  title: "Join a table and a table together"
  slug: "/join-a-table-to-a-table"
  problem: "you have two Kafka topics representing current state for keys â€” in other words, reference data. You want to join between two of these tables on a common key."
  introduction: "Suppose you have a set of data about movies and want to add further details such as who the lead actor was. In this tutorial, we'll write a program that joins each movie to another set of data holding information about who the lead actor was for movies."
  status:
    ksql: enabled
    kstreams: enabled

joining-stream-stream:
  title: "Join a stream and a stream together"
  slug: "/join-a-stream-to-a-stream"
  problem: "you have two Kafka topics whose events share a common identifying attribute and correlate during some period of time. You want to join the topics together and create a new one based on that attribute, where the new events are enriched from the original topics."
  introduction: "Suppose you have two streams containing events for orders and shipments. In this tutorial, we'll write a program that joins these two streams to create a new, enriched one. The new stream will tell us which orders have been successfully shipped, how long it took for them to ship, and which warehouse they shipped from."
  status:
    ksql: enabled
    kstreams: enabled

rekeying:
  title: "Rekey a stream with a value"
  slug: "/rekey-a-stream"
  problem: "you have a Kafka topic and you want to change the key of the messages. It may be there is no key and you want to set one, or there is a key but you want to change it to a field from the record value."
  introduction: "Suppose you have an unkeyed stream of movie ratings from movie-goers. Because the stream is not keyed, ratings for the same movie aren't guaranteed to be placed into the same partition. In this tutorial, we'll write a program that creates a new topic keyed by the movie's name. When the key is consistent, it becomes possible to process these ratings at scale and in parallel."
  status:
    ksql: enabled
    kstreams: enabled

rekeying-function:
  title: "Rekey a stream with a function"
  slug: "/rekey-with-function"
  problem: "you have a Kafka topic and you want to change the key of the messages. The new key is a variation of data you currently have in the messages. A small fragment of code could convert the data you have to the new key."
  introduction: "Consider a stream of customer information events keyed by id. Each event contains a few attributes, including the customer's phone number. In this tutorial, we'll write a program that rekeys the topic by the area address of the phone number. Customers of the same area code will be placed into the same partition in the new topic."
  status:
    ksql: enabled
    kstreams: enabled

tumbling-windows:
  title: "Create tumbling windows"
  slug: "/create-tumbling-windows"
  problem: "you have time-series events in a Kafka topic, and you want to group them into fixed-size, non-overlapping, contiguous time intervals."
  introduction: "Suppose you have a topic with events that represent ratings of movies. In this tutorial, we'll write a program that maintains tumbling windows counting the total number of ratings that each movie has received."
  status:
    ksql: enabled
    kstreams: enabled

serialization:
  title: "Convert a stream's serialization format"
  slug: "/changing-serialization-format"
  problem: "you have a Kafka topic with the data serialized in a particular format, and you want to change the format to something else."
  introduction: "Consider a topic with events that represent movie releases. The events in the topic are formatted with JSON. In this tutorial, we'll write a program that creates a new topic with the same events, but formatted with Avro."
  status:
    ksql: enabled
    kstreams: enabled
