SET 'auto.offset.reset' = 'earliest';

-- Create Table of Orders
CREATE TABLE ORDERS (
    ID VARCHAR PRIMARY KEY, 
    NAME VARCHAR, 
    EMAIL VARCHAR, 
    ADDRESS VARCHAR,
    DEST_LAT DOUBLE, 
    DEST_LONG DOUBLE,
    ORDER_TOTAL DOUBLE 
) WITH (
    KAFKA_TOPIC = 'orders', 
    VALUE_FORMAT = 'JSON', 
    KEY_FORMAT = 'KAFKA',
    PARTITIONS = 6
);

-- Create Vehicle Stream
CREATE STREAM VEHICLES ( 
    ID VARCHAR KEY,
    ORDER_ID VARCHAR,
    STATE VARCHAR,
    LAT DOUBLE,
    LONG DOUBLE,
    WAREHOUSE_LAT DOUBLE,
    WAREHOUSE_LONG DOUBLE,
    TEMPERATURE DOUBLE,
    TIRE_PRESSURE DOUBLE
) WITH (
    KAFKA_TOPIC = 'fleet_updates', 
    VALUE_FORMAT = 'JSON', 
    KEY_FORMAT = 'KAFKA',
    PARTITIONS = 6
);

-- Create order tracking table to show the eta based on vehicle location.
CREATE TABLE ORDER_TRACKER WITH (
    KAFKA_TOPIC = 'order_tracker', 
    PARTITIONS = 6
) AS 
SELECT 
    O.ID ORDER_ID, 
    LATEST_BY_OFFSET(V.ID) VEHICLE_ID,
    LATEST_BY_OFFSET(V.LAT) LAT, 
    LATEST_BY_OFFSET(V.LONG) LONG,
    LATEST_BY_OFFSET(O.DEST_LAT) DEST_LAT, 
    LATEST_BY_OFFSET(O.DEST_LONG) DEST_LONG, 
    LATEST_BY_OFFSET(ROUND(GEO_DISTANCE(CAST(V.LAT as DOUBLE), CAST(V.LONG as DOUBLE), CAST(O.DEST_LAT as DOUBLE), CAST(O.DEST_LONG as DOUBLE), 'KM'), 2)) DISTANCE_FROM_DESTINATION, 
    LATEST_BY_OFFSET(ROUND(GREATEST(ABS(V.LAT - O.DEST_LAT), ABS(V.LONG - O.DEST_LONG)) / (0.5 / 10 / 10) * 2, 2)) ETA_SECONDS 
FROM VEHICLES AS V 
JOIN ORDERS AS O
ON ((V.ORDER_ID = O.ID)) 
GROUP BY O.ID 
EMIT CHANGES;
