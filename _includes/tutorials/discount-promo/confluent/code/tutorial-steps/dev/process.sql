SET 'auto.offset.reset' = 'earliest';

-- Create Discount Code Table
CREATE TABLE DISCOUNT_CODES (
    CODE VARCHAR PRIMARY KEY, 
    PERCENTAGE DOUBLE
) WITH (
    KAFKA_TOPIC = 'discount_codes',
    VALUE_FORMAT = 'JSON',
    PARTITIONS = 6
);

-- Create Order Stream
CREATE STREAM ORDER_STREAM (
    ID BIGINT, 
    ORDER_TIME TIMESTAMP, 
    CUSTOMER_ID BIGINT, 
    ITEM_CT INT, 
    ORDER_SUBTOTAL DOUBLE, 
    DISCOUNT_CODE VARCHAR
) WITH (
    KAFKA_TOPIC = 'order_data',
    VALUE_FORMAT = 'JSON',
    PARTITIONS = 6
);


-- Application logic
CREATE TABLE DISCOUNT_ANALYSIS WITH (
    KAFKA_TOPIC = 'discount_analysis',
    VALUE_FORMAT = 'JSON',
    PARTITIONS = 6
) AS 
SELECT
    DC.PERCENTAGE,
    ROUND(AVG(OS.ITEM_CT), 0) AS AVG_ITEM_CT,
    ROUND(AVG(OS.ORDER_SUBTOTAL), 2) AS AVG_ORDER_SUBTOTAL,
    ROUND(AVG(OS.ORDER_SUBTOTAL * (100 - DC.PERCENTAGE) / 100.0), 2) AS AVG_ORDER_TOTAL,
    ROUND(AVG(OS.ORDER_SUBTOTAL * (DC.PERCENTAGE / 100.0)), 2) AS AVG_DISCOUNT_TOTAL
FROM ORDER_STREAM AS OS
INNER JOIN DISCOUNT_CODES AS DC
ON OS.DISCOUNT_CODE = DC.CODE
GROUP BY DC.PERCENTAGE
EMIT CHANGES;
