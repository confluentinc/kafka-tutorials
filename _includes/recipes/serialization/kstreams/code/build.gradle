buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.15.1"
    classpath "com.github.jengelman.gradle.plugins:shadow:${shadowPluginVersion}"
  }
}

plugins {
  id "java"
  id "com.google.cloud.tools.jib" version "1.1.1"

  id 'application'
  id 'groovy' // Apply the groovy plugin to also add support for Groovy (needed for Spock)
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
version = "0.0.1"

repositories {
  jcenter()

  maven {
    url "http://packages.confluent.io/maven"
  }
  maven { url 'https://jitpack.io' }
}

apply plugin: "com.commercehub.gradle.plugin.avro"
apply plugin: "com.github.johnrengelman.shadow"

dependencies {
  compile "org.apache.avro:avro:1.8.2"
  implementation "org.slf4j:slf4j-simple:1.7.26"
  implementation "org.apache.kafka:kafka-streams:$kafkaVersion"
  implementation "io.confluent:kafka-streams-avro-serde:$confluentVersion"
  implementation("com.github.gAmUssA:streaming-utils:-SNAPSHOT") {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
  }

  implementation 'com.google.code.gson:gson:2.8.5'
  testCompile "org.apache.kafka:kafka-streams-test-utils:2.2.0"

  // Use the latest Groovy version for Spock testing
  testImplementation 'org.codehaus.groovy:groovy-all:2.5.6'
  // Use the awesome Spock testing and specification framework even with Java
  testImplementation 'org.spockframework:spock-core:1.2-groovy-2.5'
  testImplementation 'junit:junit:4.12'
}

test {
  testLogging {
    outputs.upToDateWhen { false }
    showStandardStreams = true
    exceptionFormat = "full"
  }
}

jar {
  manifest {
    attributes(
        "Class-Path": configurations.compile.collect { it.getName() }.join(" "),
        "Main-Class": "io.confluent.developer.SerializationRecipe"
    )
  }
}

shadowJar {
  baseName= "kstreams-serialization"
  classifier="standalone"
}

// Define the main class for the application
mainClassName = 'io.confluent.developer.serialization.SerializationRecipe'
