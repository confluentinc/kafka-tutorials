/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.confluent.developer.serialization;

import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Produced;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.CountDownLatch;

import io.confluent.developer.avro.Movie;
import io.confluent.developer.serialization.serde.MovieJsonSerde;
import io.confluent.kafka.serializers.AbstractKafkaAvroSerDeConfig;
import io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde;

import static java.lang.Integer.parseInt;
import static java.lang.Short.parseShort;
import static org.apache.kafka.common.serialization.Serdes.Long;
import static org.apache.kafka.common.serialization.Serdes.String;

public class SerializationRecipe {

  private Properties buildStreamsProperties(Properties envProps) {
    Properties props = new Properties();

    props.put(StreamsConfig.APPLICATION_ID_CONFIG, envProps.getProperty("application.id"));
    props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, envProps.getProperty("bootstrap.servers"));
    props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, String().getClass());
    props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, String().getClass());
    props.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, envProps.getProperty("schema.registry.url"));
    props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);

    return props;
  }

  private void createTopics(Properties envProps) {
    Map<String, Object> config = new HashMap<>();

    config.put("bootstrap.servers", envProps.getProperty("bootstrap.servers"));
    AdminClient client = AdminClient.create(config);

    List<NewTopic> topics = new ArrayList<>();

    topics.add(new NewTopic(
        envProps.getProperty("input.topic.name"),
        parseInt(envProps.getProperty("input.topic.partitions")),
        parseShort(envProps.getProperty("input.topic.replication.factor"))));

    topics.add(new NewTopic(
        envProps.getProperty("output.avro.movies.topic.name"),
        parseInt(envProps.getProperty("output.avro.movies.topic.partitions")),
        parseShort(envProps.getProperty("output.avro.movies.topic.replication.factor"))));

    topics.add(new NewTopic(
        envProps.getProperty("output.json.movies.topic.name"),
        parseInt(envProps.getProperty("output.json.movies.topic.partitions")),
        parseShort(envProps.getProperty("output.json.movies.topic.replication.factor"))));

    client.createTopics(topics);
    client.close();
  }

  SpecificAvroSerde<Movie> movieAvroSerde(Properties envProps) {
    SpecificAvroSerde<Movie> movieAvroSerde = new SpecificAvroSerde<>();

    final HashMap<String, String> serdeConfig = new HashMap<>();
    serdeConfig.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG,
                    envProps.getProperty("schema.registry.url"));

    movieAvroSerde.configure(serdeConfig, false);
    return movieAvroSerde;
  }

  public static void main(String[] args) throws IOException {
    if (args.length < 1) {
      throw new IllegalArgumentException(
          "This program takes one argument: the path to an environment configuration file.");
    }

    new SerializationRecipe().runRecipe(args[0]);
  }

  private Topology buildTopology(Properties envProps) {
    final String inputTopicName = envProps.getProperty("input.topic.name");
    final String avroTopicName = envProps.getProperty("output.avro.movies.topic.name");
    final String jsonTopicName = envProps.getProperty("output.json.movies.topic.name");

    final StreamsBuilder builder = new StreamsBuilder();

    // input topic contains data in `::`-delimited format
    final KStream<Long, String> rawMoviesStream =
        builder.stream(inputTopicName, Consumed.with(Long(), String()));

    final KStream<Long, Movie> avroMoviesStream =
        rawMoviesStream
            // parsing string to Movie object
            .mapValues(text -> {
              String[] tokens = text.split("::");
              String id = tokens[0];
              String title = tokens[1];
              String releaseYear = tokens[2];

              Movie movie = new Movie();
              movie.setMovieId(Long.parseLong(id));
              movie.setTitle(title);
              movie.setReleaseYear(parseInt(releaseYear));
              return movie;
            })
            // extracting movie_id and use it as topic key
            .map((key, movie) -> new KeyValue<>(movie.getMovieId(), movie));

    // write movie data in avro format
    avroMoviesStream.to(avroTopicName, Produced.with(Long(), movieAvroSerde(envProps)));

    // write movie data in json format
    avroMoviesStream.to(jsonTopicName, Produced.with(Long(), new MovieJsonSerde()));

    return builder.build();
  }

  private Properties loadEnvProperties(String fileName) throws IOException {
    Properties envProps = new Properties();
    FileInputStream input = new FileInputStream(fileName);
    envProps.load(input);
    input.close();

    return envProps;
  }

  private void runRecipe(String configPath) throws IOException {
    Properties envProps = this.loadEnvProperties(configPath);
    Properties streamProps = this.buildStreamsProperties(envProps);
    Topology topology = this.buildTopology(envProps);

    this.createTopics(envProps);

    final KafkaStreams streams = new KafkaStreams(topology, streamProps);
    final CountDownLatch latch = new CountDownLatch(1);

    // Attach shutdown handler to catch Control-C.
    Runtime.getRuntime().addShutdownHook(new Thread("streams-shutdown-hook") {
      @Override
      public void run() {
        streams.close();
        latch.countDown();
      }
    });

    try {
      streams.start();
      latch.await();
    } catch (Throwable e) {
      System.exit(1);
    }
    System.exit(0);
  }
}

