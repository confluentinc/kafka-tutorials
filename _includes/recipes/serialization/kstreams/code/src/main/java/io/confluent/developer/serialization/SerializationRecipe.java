/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.confluent.developer.serialization;

import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Produced;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import io.confluent.developer.avro.Movie;
import io.confluent.developer.serialization.serde.MovieJsonDeserializer;
import io.confluent.developer.serialization.serde.MovieJsonSerializer;
import io.confluent.developer.serialization.util.MovieUtil;
import io.confluent.kafka.serializers.AbstractKafkaAvroSerDeConfig;
import io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde;

public abstract class SerializationRecipe implements IRecipe {

  @Override
  public Properties buildStreamsProperties(Properties envProps) {
    Properties props = new Properties();

    props.put(StreamsConfig.APPLICATION_ID_CONFIG, envProps.getProperty("application.id"));
    props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, envProps.getProperty("bootstrap.servers"));
    props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());
    props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());
    props.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, envProps.getProperty("schema.registry.url"));
    props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);

    return props;
  }

  @Override
  public void createTopics(Properties envProps) {
    Map<String, Object> config = new HashMap<>();
    config.put("bootstrap.servers", envProps.getProperty("bootstrap.servers"));
    AdminClient client = AdminClient.create(config);

    List<NewTopic> topics = new ArrayList<>();

    topics.add(new NewTopic(
        envProps.getProperty("input.topic.name"),
        Integer.parseInt(envProps.getProperty("input.topic.partitions")),
        Short.parseShort(envProps.getProperty("input.topic.replication.factor"))));

    topics.add(new NewTopic(
        envProps.getProperty("output.avro.movies.topic.name"),
        Integer.parseInt(envProps.getProperty("output.avro.movies.topic.partitions")),
        Short.parseShort(envProps.getProperty("output.avro.movies.topic.replication.factor"))));

    topics.add(new NewTopic(
        envProps.getProperty("output.json.movies.topic.name"),
        Integer.parseInt(envProps.getProperty("output.json.movies.topic.partitions")),
        Short.parseShort(envProps.getProperty("output.json.movies.topic.replication.factor"))));

    client.createTopics(topics);
    client.close();
  }

  public static void main(String[] args) {
    if (args.length < 1) {
      throw new IllegalArgumentException(
          "This program takes one argument: the path to an environment configuration file.");
    }

    new SerializationRecipe() {
      @Override
      public Topology buildTopology(Properties envProps) {
        final StreamsBuilder builder = new StreamsBuilder();

        final KStream<Long, String>
            rawMoviesStream =
            builder.stream(envProps.getProperty("input.topic.name"),
                           Consumed.with(
                               Serdes.Long(),
                               Serdes.String()));

        SpecificAvroSerde<Movie> movieSerde = new SpecificAvroSerde<>();

        final HashMap serdeConfig = new HashMap() {{
          put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG,
              envProps.getProperty("schema.registry.url"));
        }};
        movieSerde.configure(serdeConfig, false);

        final KStream<Long, Movie> avroMoviesStream = rawMoviesStream
            .mapValues(MovieUtil::parseMovie)
            .map((key, movie) -> new KeyValue<>(movie.getMovieId(), movie));

        avroMoviesStream
            .to(envProps.getProperty("output.json.movies.topic.name"),
                Produced.with(Serdes.Long(),
                              new MovieJsonSerde()));

        avroMoviesStream
            .to(envProps.getProperty("output.avro.movies.topic.name"),
                Produced.with(Serdes.Long(),
                              movieSerde));
        return builder.build();
      }
    }.runRecipe(args[0]);

  }
}

class MovieJsonSerde extends Serdes.WrapperSerde<Movie> {

  public MovieJsonSerde() {
    super(new MovieJsonSerializer(), new MovieJsonDeserializer());
  }
}
